import { createAsyncThunk, createSlice} from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { AuthorizationTokenObj } from "../auth/types";
import { fetchMediaLis } from "./browseAPI";
import { MediaList } from "./types";

export interface CounterState {
  entitiesInfo: MediaList;
  status: "idle" | "loading" | "failed";
}

const initialState: CounterState = {
  entitiesInfo: {
    CacheDataValidTo: "",
    SourceType: "",
    PageSize: 0,
    PageNumber: 0,
    TotalCount: 0,
    Entities: [],
  },
  status: "idle",
};

// const token: AuthorizationTokenObj
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getMediaLisAsync = createAsyncThunk(
  "movi/fetchMediaLis",
  async (token: AuthorizationTokenObj) => {
    const response = await fetchMediaLis(token);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const moviSlice = createSlice({
  name: "movi",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMediaLisAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getMediaLisAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.entitiesInfo = action.payload;
      })
      .addCase(getMediaLisAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const entitiesList = (state: RootState) =>
  state.browse.entitiesInfo.Entities;
export const entitiesStatus = (state: RootState) => state.browse.status;

export default moviSlice.reducer;
